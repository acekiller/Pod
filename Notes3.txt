about 09/11/2011
< > { } [ ] = + " \ \n \r \W \t space
< >                     <, >
< foo >                 <, string(foo), > (foo=null) 
< foo = >               <, string(foo), =, > (foo=null)
< foo = bar >           <, string(foo), =, string(bar) (foo=bar), >
< foo = bar = >         <, string(foo), =, string(bar) (foo=bar), =(error), >
< foo = bar = nitz >    <, string(foo), =, string(bar) (foo=bar), =(error), string(nitz), > (nitz=null)
< = >                   <, =(error), >
< = bar >               <, =(error), string(bar), > (bar=null)

< foo = { ... } >       <, string(foo), =, {, ...}, >
< foo { ... } >         <, string(foo), {(foo=null) (error), ...}(drop), >
< = { ... } >           <, =(error), {(error), ...}(drop), >
< { ... } >             <, {(error), ...}(drop), >


x                                       empty stack
=    --> x          (returns error)     =(error)
foo  --> foo                            string(foo)

x                                       empty stack
foo  --> foo                            string(foo)
=    --> foo=null                       = (foo=null)
bar  --> x          (returns foo=bar)   string(bar)(foo = bar)

start with foo=bar
try ... (foo bar) ... no

= foo bar --> foo=bar
= this + is crazy --> thisis=crazy
= this is crazy --> this=is crazy
= } --> null=null }
= foo } --> foo=null }
= foo bar } --> foo=bar }
= this is crazy } --> this=is crazy }

+ foo bar } --> foo bar }
+ foo } --> foo }
+ } --> }

foo + bar fish } --> foobar fish }
foo + bar } --> foobar }
foo + } --> foo }

\t  --> ascii 9
\n  --> ascii 10
\r  --> ascii 13
\9\ --> ascii 9
\a\ --> ascii 10
\d\ --> ascii 13
\09\--> ascii 9

etc.

< = >
<  -->  [ <> ]
=  -->  [ <> ] error
>  -->  [ <> ] complete

< foo = >
<   -->  [ <> ]
foo -->  [ <> ] (foo)
=   -->  [ <> foo= ]
>   -->  [ < foo=null > ] error complete

< foo >
<   --> [ <> ]
foo --> [ <> ] (foo)
>   --> [ <> ] error complete

{ foo }
{   -->  [ {} ]
foo -->  [ {} ] (foo)
}   -->  [ { foo } ] complete

{ foo = bar = }
{   -->  [ {} ]
foo -->  [ {} ] (foo)
=   -->  [ {} foo= ]
bar -->  [ {} foo= ] (bar)
=   -->  [ { foo=null } bar= ]
}   -->  [ { foo=null bar=null } ] complete

< foo = bar >
<   --> [ <> ]
foo --> [ <> ] (foo)
=   --> [ <> foo= ]
bar --> [ <> foo= ] (bar)
>   --> [ < foo=bar > ] complete

{ foo = bar }
{   -->  [ {} ]
foo -->  [ {} ] (foo)
=   -->  [ {} foo= ]
bar -->  [ {} foo= ] (bar)
}   -->  [ { foo=bar } ] complete

< foo bar >
<   -->  [ <> ]
foo -->  [ <> ] (foo)
bar -->  [ <> ] error (bar)
>   -->  [ <> ] error complete

< < > = bar >
<   -->  [ <> ]
<   -->  [ <> <> ]
>   -->  [ <> ] error
=   -->  [ <> ] error 
bar -->  [ <> ] (bar)
>   -->  [ <> ] error complete

{ < > = bar }
{   -->  [ {} ]
<   -->  [ {} <> ]
>   -->  [ { <> } ]
=   -->  [ { <> } ] error
bar -->  [ { <> } ] (bar)
}   -->  [ { <> bar } ] complete

< foo = = bar >
<   -->  [ <> ]
foo -->  [ <> ] (foo)
=   -->  [ <> foo= ]
=   -->  [ <> foo= ] error
bar -->  [ <> foo= ] (bar)
>   -->  [ < foo=bar > ] complete

foo 
foo -->  [] (foo)
  -->  [ foo ] sync-complete

=
=   -->  [] error
  -->  [] sync-complete

foo = 
foo -->  [] (foo)
=   -->  [ foo= ]
  -->  [ foo=null ] error sync-complete

foo = bar
foo -->  [] (foo)
=   -->  [ foo= ]
bar -->  [ foo= ] (bar)
  -->  [ foo=bar ] sync-complete

---------
Trying new thoughts.
---------

is it real
is   --> [] (is)
it   --> [ is ] (it)
real --> [ is it ] (real)

// Trying without previous string.

foo .
foo -->  [ foo ]
.   -->  sync []

foo = bar .
foo --> [ foo ]
=   --> [ foo= ]
bar --> [ foo=bar ] complete-so-push-down --> []
.   --> sync []   // unnecessary, but good habit

{ foo = bar } .
{   -->  [ {} ]
foo -->  [ {} foo ]
=   -->  [ {} foo= ]
bar -->  [ {} foo=bar ] completed-mapping-so-push-down --> [ { foo=bar } ]
}   -->  [ { foo=bar } ] completed-list-so-push-down...process --> []
.   -->  sync    // unnecessary

{ foo }
{   -->  [ {} ]
foo -->  [ {} foo ]
}   -->  if tos=string, push-down-string [ { foo } ] completed...process --> []

{ ibby foo = bar bibby tibby }
{     -->  [ {} ]
ibby  -->  [ {} ibby ]
foo   -->  if tos=string, push-down-string --> [ { ibby } foo ]
=     -->  [ { ibby } foo= ]
bar   -->  [ { ibby } foo=bar ] completed-mapping [ { ibby foo=bar } ]
bibby -->  [ { ibby foo=bar } bibby ]
tibby -->  if tos=string, push-down-string --> [ { ibby foo=bar bibby } tibby ]
}     -->  if tos=string, push-down-string --> [ { ibby foo=bar bibby tibby } ]
           then completed-list-so-push-down...process --> []

Symantics for { foo = bar = } differs.
    With previous_string --> { foo=null bar=null }
    W/o previous_string --> { foo=bar error }

Can I get around the need for a mapping (a key-value association) prior to
having a map to put it in?

foo' means a flagged string "foo"
foo= means a mapping with a key of "foo"

< foo = bar >
<   -->  [ <> ]
foo -->  [ <> foo ]
=   -->  [ <> foo' ]
bar -->  [ <> foo' bar]
         [ < foo=bar > ]
>   -->  completed []

< foo = >
<   -->  [ <> ]
foo -->  [ <> foo ]
=   -->  [ <> foo' ]
>   -->  [ <> foo' "" ]
         [ < foo="" > ]
         completed --> []

{ buz foo = bar }
{   -->  [ {} ]
buz -->  [ {} buz ]
foo -->  [ { buz } foo ]
=   -->  [ {} foo' ]
bar -->  [ {} foo' bar]
         [ { foo=bar } ]
}   -->  completed []

But whatever way you do it (either foo' or foo=), you end up creating a mapping
prior to having a map to put it in.  So I have to write a define_mapping
function for pod_map.  So why change anything?  Well, you can get around a
mapping, but you need another layer of lookahead.  What are you adding the
mapping to?

lab rat.

lab     [ ]     -->  [ lab ]    if stack has a string, merge down
                                  (it doesn't)
                                push string ("lab");
rat     [ lab ] -->  [ rat ]    if stack has a string, merge down
                                  "lab" is merged.  It's the bottom, process it.
.       [ rat ]                 merge down until empty
        [ ]

Also, if you go the foo' route, it makes more sense to drop the = (the flag,
denoted by ') rather than try to complete the mapping (denoted by adding "").

lab = rat.

lab     [ ]     ->  [ lab ]     if stack has an unflagged string, merge down
                                  (it doesn't)
                                push string ("lab");

=       [ lab ] ->  [ lab' ]    flag the string

rat     [ lab'] ->  [ lab' rat ]if stack has an unflagged string, merge down
                                  (it doesn't)
                                push string ("rat");

.       [ lab' rat ]            merge down until empty
        [ lab=rat ]
        [ ]


kill lab = rat <foo = bar>
start   [ ]
kill ...................... if stack has an unflagged string, merge down
                              (it doesn't)
                            push string ("kill")
    ->  [ kill ]
lab ....................... if stack has an unflagged string, merge down
                              merge down ("kill")
                              it's on bottom so process it
                            push string ("lab");
    ->  [ lab ]
= ......................... flag the string
    ->  [ lab' ]
rat ....................... if stack has an unflagged string, merge down
                              (it doesn't)
                            push string ("rat");
    ->  [ lab' rat ]
< ......................... if stack has an unflagged string, merge down
                              merge down ("rat")
    ->  [ lab=rat ]           a mapping results so merge down again
                              merge down (lab=rat)
                              its on the bottom so process it
    ->  [ ]                 create and push map
    ->  [ <> ]
foo ....................... if stack has an unflagged string, merge down  
                              (it doesn't)
                            push string ("foo")
    ->  [ <> foo ]
= ......................... flag the string
    ->  [ <> foo' ]    
bar ....................... if stack has an unflagged string, merge down
                              (it doesn't)
                            push string ("bar");
    ->  [ <> foo' bar ]
> ......................... if stack has an unflagged (any?) string, merge down
                              merge down ("bar")
    ->  [ <> foo=bar ]        a mapping results so merge down again
                              merge down (foo=bar)
    ->  [ < foo=bar > ]     at the end of the map so merge down (yet again)
                              its on the bottom so process it
    ->  [ ]


{ really foo = bar }
start   [ ]
{ ......................... if stack has an unflagged string, merge down
                              (it doesn't)
                            create and push list
    ->  [ {} ]
really .................... if stack has an unflagged string, merge down  
                              (it doesn't)
                            push string ("really")
    ->  [ {} really ]
foo ....................... if stack has an unflagged string, merge down  
                              merge down ("really")
                            push string ("foo")
    ->  [ { really } foo ]
= ......................... flag the string
    ->  [ { really } foo' ]    
bar ....................... if stack has an unflagged string, merge down
                              (it doesn't)
                            push string ("bar");
    ->  [ { really } foo' bar ]
} ......................... if stack has an unflagged (any?) string, merge down
                              merge down ("bar")
    ->  [ { really } foo=bar ]
                              a mapping results so merge down again
                              merge down (foo=bar)
    ->  [ { really foo=bar } ]
                            at the end of the list so merge down (yet again)
                              its on the bottom so process it
    ->  [ ]

look = {}
start   [ ]
look ...................... if stack has an unflagged string, merge down  
                              (it doesn't)
                            push string ("look")
    ->  [ look ]
= ......................... flag the string/create the mapping
    ->  [ look' ]    
{ ......................... if stack has an unflagged string, merge down
                              (it doesn't)
                            create and push list
    ->  [ look' {} ]
} ......................... if stack has an unflagged (any?) string, merge down
                              (it doesn't)
                            at the end of the list so merge down
                              merge down ({})
    ->  [ look={} ]
                            a mapping results so merge down again
                              merge down (look={})
                              its on the bottom so process it
    ->  [ ]


{ yes no may }
{   ->  [ {} ]
yes ->  [ {} yes ]
no  ->  [ { yes } no 
may ->  [ { yes no } may ]
}   ->  [ { yes no may } ]  ->  [ ]


2011.09.14


< foo = bar > (how many times have I done this one?)
<   ->  [ <> ]
foo ->  [ <> foo ]
=   ->  [ <> foo= ]
bar ->  [ <> foo= bar ]
>   ->  * merge, top is string
        [ <> foo=bar ]
        * merge, completed mapping
        reduce
        [ <> foo ]
        drop foo (can't put foo in map)
        [ <> ]
        * merge, top is map
        [ ] finish

            problem, foo=bar will be regressed to foo on merge
            changing check in merge_down, only regress if mapping->value is NULL
            should be:
        [ <> foo=bar ]
        * merge, completed mapping
        [ < foo=bar > ]
        * merge, top is map
        [ ] finish

< foo = >
<   ->  [ <> ]
foo ->  [ <> foo ]
=   ->  [ <> foo= ]
>   ->  no merge, top is not string
        no merge, top is not map
        [ <> foo= ] finish -- broken
    should be
        * merge, top is (incomplete) mapping
        regress
        [ <> foo ]
        drop foo (can't put foo in map)
        [ <> ]
        * merge, top is map
        [ ] finish
        
< >
<   ->  [ <> ]
>   ->  merge
        [ ] finish

{ < foo = bar > }
{   ->  [ {} ]
<   ->  [ {} <> ]
foo ->  [ {} <> foo ]
=   ->  [ {} <> foo= ]
bar ->  [ {} <> foo= bar ]
>   ->  merge, top is string
        [ {} <> foo=bar ]
        merge, completed mapping
        [ {} < foo=bar > ]
        merge, top is map
        [ { < foo=bar > } ]
}   ->  merge, top is list
        [ ] finish
        
{ foo = }
{   ->  [ {} ]
foo ->  [ {} foo ]
=   ->  [ {} foo= ]
}   ->  no merge, top is not string     
        no merge, top is not list
        [ {} foo= ] finish -- broken

{ foo }
{   ->  [ {} ]
foo ->  [ {} foo ]
}   ->  * merge, top is string
        [ { foo } ]
        * merge, top is list
        [ ] finish

so end_map and end_list should merge on string or mapping.

{ foo = }
{   ->  [ {} ]
foo ->  [ {} foo ]
=   ->  [ {} foo= ]
}   ->  * merge, top is mapping
        regress, top is incomplete
        [ {} foo ]
        [ { foo } ]
        * merge, top is list
        [ ] finish

ok, that works.

,   ,   ,   ,   ,   ,
